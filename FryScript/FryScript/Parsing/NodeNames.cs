namespace FryScript.Parsing
{
    public class NodeNames
    {
        public const string Literal = "Literal";
        public const string StringLiteral = "StringLiteral";
        public const string NumberLiteral = "NumberLiteral";
        public const string BooleanLiteral = "BooleanLiteral";
        public const string NullLiteral = "NullLiteral";
        public const string NaNLiteral = "NanLiteral";
        public const string Identifier = "Identifier";
        public const string This = "This";
        public const string Base = "Base";

        public const string Script = "Script";
        public const string ScriptHeaders = "ScriptHeaders";
        public const string ScriptHeader = "ScriptHeader";
        public const string ScriptExtend = "ScriptExtend";
        public const string ScriptImport = "ScriptImport";
        public const string ScriptImportFrom = "ScriptImportFrom";
        public const string Statements = "Statements";
        public const string Statement = "Statement";
        public const string BlockStatement = "BlockStatement";
        public const string SemiStatement = "SemiStatement";
        public const string VariableDeclaration = "VariableDeclaration";
        public const string Expression = "Expression";
        public const string Index = "Index";
        public const string AssignExpression = "AssignExpression";
        public const string IdentifierExpression = "IdentifierExpression";
        public const string ObjectLiteralExpression = "ObjectLiteralExpression";
        public const string ObjectMembers = "ObjectMembers";
        public const string ObjectMember = "ObjectMember";
        public const string FunctionExpression = "FunctionExpression";
        public const string Params = "Params";
        public const string FunctionParameters = "FunctionParameters";
        public const string ParameterNames = "ParameterNames";
        public const string ParameterName = "ParameterName";
        public const string FunctionBlock = "FunctionBlock";
        public const string ReturnStatement = "ReturnStatement";
        public const string IfStatement = "IfStatement";
        public const string ForStatement = "ForStatement";
        public const string ForEachStatement = "ForEachStatement";
        public const string WhileStatement = "WhilteStatement";
        public const string BreakStatement = "BreakStatement";
        public const string ContinueStatement = "ContinueStatement";
        public const string FunctionExtendStatement = "FunctionExtendStatement";
        public const string EmptyStatement = "EmptyStatement";
        public const string TryCatchFinallyStatement = "TryCatchFinallyStatement";
        public const string TryStatement = "TryStatement";
        public const string CatchStatement = "CatchStatement";
        public const string FinallyStatement = "FinallyStatement";
        public const string ThrowExpression = "ThrowExpression";
        public const string FibreExpression = "FibreExpression";
        public const string YieldStatement = "YieldExpression";
        public const string TernaryExpression = "TernaryExpression";
        public const string BooleanExpression = "BooleanExpression";
        public const string RelationalExpression = "RelationalExpression";
        public const string MultiplyExpression = "MultiplyExpression";
        public const string AddExpression = "AddExpression";
        public const string InvokeMemberExpression = "InvokeMemberExpression";
        public const string InvokeExpression = "InvokeExpression";
        public const string BeginMemberExpression = "BeginMemberExpression";
        public const string BeginExpression = "BeginExpression";
        public const string ResumeExpression = "ResumeExpression";
        public const string AwaitExpression = "AwaitExpression";
        public const string AwaitMemberExpression = "AwaitMemberExpression";
        public const string InvokeParens = "InvokeParens";
        public const string InvokeArgs = "InvokeArgs";
        public const string ParenExpression = "ParenExpression";
        public const string ArrayExpression = "ArrayExpression";
        public const string ArrayItems = "ArrayItems";
        public const string BinaryExpression = "BinaryExpression";
        public const string UnaryExpression = "UnaryExpression";
        public const string UnarySuffixExpression = "UnarySuffixExpression";
        public const string UnaryPrefixExpression = "UnaryPrefixExpression";
        public const string NotExpression = "NotExpression";
        public const string NewExpression = "NewExpression";
        public const string IsExpression = "IsExpression";
        public const string ExtendsExpression = "ExtendsExpression";
        public const string HasExpression = "HasExpression";
        public const string ScriptProto = "ScriptProto";
        public const string Proto = "Proto";
        public const string ConditionalAssignExpression = "ConditionalAssignExpression";
        public const string TupleExpression = "TupleExpression";
        public const string AssignTupleExpression = "AssignTupleExpression";
        public const string TupleNames = "TupleNames";
        public const string TupleDeclaration = "TupleDclaration";
        public const string TupleName = "TupleName";
        public const string AsExpressionNode = "AsExpressionNode";

        public const string BooleanOperator = "BooleanOperator";
        public const string RelationalOperator = "RelationalOperator";
        public const string DivideOperator = "DivideOperator";
        public const string MultiplyOperator = "MultiplyOperator";
        public const string AddOperator = "AddOperator";
        public const string SubtractOperator = "SubtractOperator";
        public const string BinaryOperator = "BinaryOperator";
        public const string UnaryOperator = "UnaryOperator";
        public const string NotOperator = "NotOperator";
        public const string ConditionalAssignOperator = "ConditionalAssignOperator";
    }
}
